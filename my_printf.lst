     1                                  ;===============================================================================
     2                                  ; Globals
     3                                  global MyPrintf
     4                                  ;===============================================================================
     5                                  
     6                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     7                                  section .text
     8                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     9                                  
    10                                  ;===============================================================================
    11                                  ; Trampline for printf
    12                                  MyPrintf:
    13                                      ;---------------------------------------------------------------------------
    14                                      ; Saving return address in R11
    15 00000000 415B                        pop r11 ;return address
    16                                      ;---------------------------------------------------------------------------
    17                                      ; Pushing arguements which may be used in printf to stack
    18                                      ; Stack will be used later as an array of arguments
    19 00000002 4151                        push r9
    20 00000004 4150                        push r8
    21 00000006 51                          push rcx
    22 00000007 52                          push rdx
    23 00000008 56                          push rsi
    24                                      ;---------------------------------------------------------------------------
    25                                      ; Copying format string address to RSI from RDI (it is always 1st parameter)
    26 00000009 4889FE                      mov rsi, rdi
    27                                      ;---------------------------------------------------------------------------
    28                                      ; Pushing registers that we need to save
    29 0000000C 53                          push rbx
    30 0000000D 55                          push rbp
    31 0000000E 4154                        push r12
    32 00000010 4155                        push r13
    33 00000012 4156                        push r14
    34 00000014 4157                        push r15
    35                                      ;---------------------------------------------------------------------------
    36                                      ; Address of first parameter in RBP (array pointer in printf)
    37 00000016 488D6C2430                  lea rbp, [rsp + 8 * 6]
    38                                      ;---------------------------------------------------------------------------
    39                                      ; Jumping to printf which uses (all arguements are in stack)
    40 0000001B EB11                        jmp MyPrintf_cdecl
    41                                      ;---------------------------------------------------------------------------
    42                                      ; Address to printf end
    43                                      .trampline_back:
    44                                      ;---------------------------------------------------------------------------
    45                                      ; Resetting registers that we need to save from stack
    46 0000001D 415F                        pop r15
    47 0000001F 415E                        pop r14
    48 00000021 415D                        pop r13
    49 00000023 415C                        pop r12
    50 00000025 5D                          pop rbp
    51 00000026 5B                          pop rbx
    52                                      ;---------------------------------------------------------------------------
    53                                      ; Deleting arguments that we pushed
    54 00000027 4883C428                    add rsp, 8 * 5
    55                                      ;---------------------------------------------------------------------------
    56                                      ; Returning to caller
    57 0000002B 41FFE3                      jmp r11
    58                                  ;===============================================================================
    59                                  
    60                                  ;===============================================================================
    61                                  ; String length (0 is end)
    62                                  ; Expects:          R9  - string address
    63                                  ; Returns:          RCX - length of string
    64                                  ;-------------------------------------------------------------------------------
    65                                  %macro Strlen 0
    66                                      ;---------------------------------------------------------------------------
    67                                      ; Saving RDI in stack
    68                                      push rdi
    69                                      ;---------------------------------------------------------------------------
    70                                      ; Copying string address to RDI
    71                                      mov rdi, r9
    72                                      ;---------------------------------------------------------------------------
    73                                      ; String terminating symbol in AL
    74                                      mov al, 0
    75                                      ;---------------------------------------------------------------------------
    76                                      ; Max number of bytes to read in RCX (-1 = MAX_UNSIGNED)
    77                                      mov rcx, -1
    78                                      ;---------------------------------------------------------------------------
    79                                      ; Running until current byte is zero
    80                                      repne scasb
    81                                      ;---------------------------------------------------------------------------
    82                                      ; Reversing RCX to get number of bytes
    83                                      not rcx
    84                                      ;---------------------------------------------------------------------------
    85                                      ; Resetting RDI from stack
    86                                      pop rdi
    87                                  %endmacro
    88                                  ;===============================================================================
    89                                  
    90                                  ;===============================================================================
    91                                  ; Macro which moves arguements to needed registers and calls writing number
    92                                  ; Expects:          $1 - mask
    93                                  ;                   $2 - shift
    94                                  ;-------------------------------------------------------------------------------
    95                                  %macro HandleBinPowerNum 2
    96                                      mov r9, [rbp]
    97                                      add rbp, 8
    98                                      ;---------------------------------------------------------------------------
    99                                      ; Mask to R10
   100                                      mov r10, %1
   101                                      ;---------------------------------------------------------------------------
   102                                      ; Shift in CL (deviding by 8 every time)
   103                                      mov cl, %2
   104                                      ;---------------------------------------------------------------------------
   105                                      ; Writing number to buffer
   106                                      call ToBinPow
   107                                      ;---------------------------------------------------------------------------
   108                                      ; Going to next symbol in printf main loop
   109                                      jmp .loop_start
   110                                  %endmacro
   111                                  ;===============================================================================
   112                                  
   113                                  ;===============================================================================
   114                                  ; Function with formatted print. Supported specifiers are:
   115                                  ; |%c|x|
   116                                  ; |%b|x|
   117                                  ; |%x|x|
   118                                  ; |%o|x|
   119                                  ; |%%|x|
   120                                  ; |%d|x|
   121                                  ; |%s|x|
   122                                  ; Expects:          STACK[ 0 ]  - format string address
   123                                  ;                   STACK[...]  - arguments
   124                                  ; Returns:          None
   125                                  ;-------------------------------------------------------------------------------
   126                                  MyPrintf_cdecl:
   127                                      ;---------------------------------------------------------------------------
   128                                      ; Setting RAX to zeros
   129 0000002E 4831C0                      xor rax, rax
   130                                      ;---------------------------------------------------------------------------
   131                                      ; Saving buffer address to RDI
   132 00000031 48BF-                       mov rdi, Buffer
   132 00000033 [0000000000000000] 
   133                                      ;---------------------------------------------------------------------------
   134                                      ; Main loop through characters
   135                                      ; WARNING: IT IS EXPECTED THAT ALL BYTES OF RAX EXCEPT THE LOWEST ARE ZEROS
   136                                      .loop_start:
   137                                          ;-----------------------------------------------------------------------
   138                                          ; Reading symbol
   139 0000003B AC                              lodsb
   140                                          ;-----------------------------------------------------------------------
   141                                          ; Checking if specifier
   142 0000003C 3C25                            cmp al, '%'
   143 0000003E 7415                            je .specifier_handle
   144                                          ;-----------------------------------------------------------------------
   145                                          ; Checking if string ends
   146 00000040 84C0                            test al, al
   147 00000042 7427                            jz .printf_end
   148                                          ;-----------------------------------------------------------------------
   149                                          ; Checking if end of buffer reached and writing symbol to buffer
   150                                          .add_symbol:
   151 00000044 4881FF[05000000]                cmp rdi, MaxPointer
   152 0000004B 7C05                            jl .skip_clear_buffer
   153 0000004D E892010000                      call ClearBuffer
   154                                          .skip_clear_buffer:
   155 00000052 AA                              stosb
   156                                          ;-----------------------------------------------------------------------
   157 00000053 EBE6                            jmp .loop_start
   158                                          ;-----------------------------------------------------------------------
   159                                          ; Writing specifier
   160                                          .specifier_handle:
   161                                              ;-------------------------------------------------------------------
   162                                              ; Reading specifying character
   163 00000055 AC                                  lodsb
   164                                              ;-------------------------------------------------------------------
   165                                              ; Going to write if %%
   166 00000056 3C25                                cmp al, '%'
   167 00000058 74EA                                je .add_symbol
   168                                              ;-------------------------------------------------------------------
   169                                              ; Checking that in jump table bounds
   170 0000005A 3C62                                cmp al, 'b'
   171 0000005C 7C14                                jl .specifier_default
   172 0000005E 3C78                                cmp al, 'x'
   173 00000060 7710                                ja .specifier_default
   174                                              ;-------------------------------------------------------------------
   175                                              ; Subtracting to get index
   176 00000062 2C62                                sub al, 'b'
   177                                              ;-------------------------------------------------------------------
   178                                              ; Jump table jump to the handler of specifier
   179 00000064 FF24C5[00000000]                    jmp [JmpTableSpecifiers + 8 * rax]
   180                                      ;---------------------------------------------------------------------------
   181                                      .printf_end:
   182                                      ;---------------------------------------------------------------------------
   183                                      ; Writing buffer to console
   184 0000006B E874010000                  call ClearBuffer
   185                                      ;---------------------------------------------------------------------------
   186                                      ; End of printf
   187 00000070 EBAB                        jmp MyPrintf.trampline_back
   188                                  ;===============================================================================
   189                                  ; This is printf section with specifiers switch handlers
   190                                  ;-------------------------------------------------------------------------------
   191                                  ; Default
   192                                  ;-------------------------------------------------------------------------------
   193                                      .specifier_default:
   194                                          ;-------------------------------------------------------------------
   195                                          ; Adding the symbol after % and the % to buffer
   196 00000072 88C4                            mov ah, al
   197 00000074 80C462                          add ah, 'b'
   198 00000077 B025                            mov al, '%'
   199 00000079 66AB                            stosw
   200                                          ;-------------------------------------------------------------------
   201                                          ; Resetting RAX register to zero
   202 0000007B 4831C0                          xor rax, rax
   203                                          ;-------------------------------------------------------------------
   204                                          ; Going to the next symbol in string (start of main printf loop)
   205 0000007E EBBB                            jmp .loop_start
   206                                  
   207                                  ;-------------------------------------------------------------------------------
   208                                  ; Charecter
   209                                  ;-------------------------------------------------------------------------------
   210                                      .specifier_character:
   211                                          ;-------------------------------------------------------------------
   212                                          ; Reading symbol to AL from stack
   213 00000080 488B4500                        mov rax, [rbp]
   214 00000084 4883C508                        add rbp, 8
   215                                          ;-------------------------------------------------------------------
   216                                          ; Going to adding symbol and checking the size in printf main loop
   217 00000088 EBBA                            jmp .add_symbol
   218                                  
   219                                  ;-------------------------------------------------------------------------------
   220                                  ; Binary number
   221                                  ;-------------------------------------------------------------------------------
   222                                      .specifier_binary:
   223                                          HandleBinPowerNum 0x1, 1
    96 0000008A 4C8B4D00            <1>  mov r9, [rbp]
    97 0000008E 4883C508            <1>  add rbp, 8
    98                              <1> 
    99                              <1> 
   100 00000092 41BA01000000        <1>  mov r10, %1
   101                              <1> 
   102                              <1> 
   103 00000098 B101                <1>  mov cl, %2
   104                              <1> 
   105                              <1> 
   106 0000009A E801010000          <1>  call ToBinPow
   107                              <1> 
   108                              <1> 
   109 0000009F EB9A                <1>  jmp .loop_start
   224                                  
   225                                  ;-------------------------------------------------------------------------------
   226                                  ; Hexadecimal number
   227                                  ;-------------------------------------------------------------------------------
   228                                      .specifier_hexadecimal:
   229                                          HandleBinPowerNum 0xf, 4
    96 000000A1 4C8B4D00            <1>  mov r9, [rbp]
    97 000000A5 4883C508            <1>  add rbp, 8
    98                              <1> 
    99                              <1> 
   100 000000A9 41BA0F000000        <1>  mov r10, %1
   101                              <1> 
   102                              <1> 
   103 000000AF B104                <1>  mov cl, %2
   104                              <1> 
   105                              <1> 
   106 000000B1 E8EA000000          <1>  call ToBinPow
   107                              <1> 
   108                              <1> 
   109 000000B6 EB83                <1>  jmp .loop_start
   230                                  
   231                                  ;-------------------------------------------------------------------------------
   232                                  ; Octal number
   233                                  ;-------------------------------------------------------------------------------
   234                                      .specifier_octal:
   235                                          HandleBinPowerNum 0x7, 3
    96 000000B8 4C8B4D00            <1>  mov r9, [rbp]
    97 000000BC 4883C508            <1>  add rbp, 8
    98                              <1> 
    99                              <1> 
   100 000000C0 41BA07000000        <1>  mov r10, %1
   101                              <1> 
   102                              <1> 
   103 000000C6 B103                <1>  mov cl, %2
   104                              <1> 
   105                              <1> 
   106 000000C8 E8D3000000          <1>  call ToBinPow
   107                              <1> 
   108                              <1> 
   109 000000CD E969FFFFFF          <1>  jmp .loop_start
   236                                  
   237                                  ;-------------------------------------------------------------------------------
   238                                  ; Decimal number
   239                                  ;-------------------------------------------------------------------------------
   240                                      .specifier_decimal:
   241                                          ;-------------------------------------------------------------------
   242                                          ; Reading number to R9 from stack
   243 000000D2 4C8B4D00                        mov r9, [rbp]
   244 000000D6 4883C508                        add rbp, 8
   245                                          ;-------------------------------------------------------------------
   246                                          ; Writing number in decimal form to buffer
   247 000000DA E864000000                      call ToDec
   248                                          ;-------------------------------------------------------------------
   249                                          ; Going to next symbol in printf main loop
   250 000000DF E957FFFFFF                      jmp .loop_start
   251                                  
   252                                  ;-------------------------------------------------------------------------------
   253                                  ; String
   254                                  ;-------------------------------------------------------------------------------
   255                                      .specifier_string:
   256                                          ;-------------------------------------------------------------------
   257                                          ; Reading string address to R9 from stack
   258 000000E4 4C8B4D00                        mov r9, [rbp]
   259 000000E8 4883C508                        add rbp, 8
   260                                          ;-------------------------------------------------------------------
   261                                          ; Counting number of bytes in string
   262                                          Strlen
    66                              <1> 
    67                              <1> 
    68 000000EC 57                  <1>  push rdi
    69                              <1> 
    70                              <1> 
    71 000000ED 4C89CF              <1>  mov rdi, r9
    72                              <1> 
    73                              <1> 
    74 000000F0 B000                <1>  mov al, 0
    75                              <1> 
    76                              <1> 
    77 000000F2 48C7C1FFFFFFFF      <1>  mov rcx, -1
    78                              <1> 
    79                              <1> 
    80 000000F9 F2AE                <1>  repne scasb
    81                              <1> 
    82                              <1> 
    83 000000FB 48F7D1              <1>  not rcx
    84                              <1> 
    85                              <1> 
    86 000000FE 5F                  <1>  pop rdi
   263                                          ;-------------------------------------------------------------------
   264                                          ; Comparing it with max availeble address
   265 000000FF 4889C8                          mov rax, rcx
   266 00000102 4801F8                          add rax, rdi
   267 00000105 483D[05000000]                  cmp rax, MaxPointer
   268 0000010B 7C27                            jl .write_buffer
   269                                          ;-------------------------------------------------------------------
   270                                          ; Outputting string to console with syscall if we can't put it in
   271                                          ; buffer
   272                                          ;-------------------------------------------------------------------
   273                                              ; Clearing buffer
   274 0000010D E8D2000000                          call ClearBuffer
   275                                              ;---------------------------------------------------------------
   276                                              ; Saving RDI and RSI
   277 00000112 57                                  push rdi
   278 00000113 56                                  push rsi
   279                                              ;---------------------------------------------------------------
   280                                              ; RAX = write system call
   281 00000114 B801000000                          mov rax, 1
   282                                              ;---------------------------------------------------------------
   283                                              ; RDI = file stream
   284 00000119 BF01000000                          mov rdi, 1
   285                                              ;---------------------------------------------------------------
   286                                              ; RSI = string pointer
   287 0000011E 4C89CE                              mov rsi, r9
   288                                              ;---------------------------------------------------------------
   289                                              ; RDX = number of bytes to print
   290 00000121 4889CA                              mov rdx, rcx
   291                                              ;---------------------------------------------------------------
   292                                              ; Calling writing of string
   293 00000124 4153                                push r11
   294 00000126 0F05                                syscall
   295 00000128 415B                                pop r11
   296                                              ;---------------------------------------------------------------
   297                                              ; Resetting registers
   298 0000012A 5E                                  pop rsi
   299 0000012B 5F                                  pop rdi
   300                                          ;-------------------------------------------------------------------
   301                                          ; Going to next symbol in main printf loop
   302 0000012C 4831C0                          xor rax, rax
   303 0000012F E907FFFFFF                      jmp .loop_start
   304                                          .write_buffer:
   305                                          ;-------------------------------------------------------------------
   306                                          ; Adding string to buffer
   307                                          ;-------------------------------------------------------------------
   308                                              ; Saving RSI
   309 00000134 56                                  push rsi
   310                                              ;---------------------------------------------------------------
   311                                              ; Copying string address to RSI
   312 00000135 4C89CE                              mov rsi, r9
   313                                              ;---------------------------------------------------------------
   314                                              ; Copying string to printf buffer
   315 00000138 F3A4                                rep movsb
   316                                              ;---------------------------------------------------------------
   317                                              ; Resetting RSI
   318 0000013A 5E                                  pop rsi
   319                                          ;-------------------------------------------------------------------
   320                                          ; Going to next symbol in main printf loop
   321 0000013B 4831C0                          xor rax, rax
   322 0000013E E9F8FEFFFF                      jmp .loop_start
   323                                  ;===============================================================================
   324                                  
   325                                  ;===============================================================================
   326                                  ; Writes decimal number to a buffer
   327                                  ; Expects:  R9 - number to write
   328                                  ; Returns:  None
   329                                  ;-------------------------------------------------------------------------------
   330                                  ToDec:
   331                                      ;---------------------------------------------------------------------------
   332                                      ; Checking if number is negative
   333 00000143 4D85C9                      test r9, r9
   334                                      ;---------------------------------------------------------------------------
   335 00000146 7909                        jns .sign_unset
   336                                          ;-----------------------------------------------------------------------
   337                                          ; Writing '-' to buffer
   338 00000148 B02D                            mov al, '-'
   339 0000014A AA                              stosb
   340                                          ;-----------------------------------------------------------------------
   341                                          ; Reversing numbers sign
   342 0000014B 49F7D1                          not r9
   343 0000014E 49FFC1                          inc r9
   344                                          ;-----------------------------------------------------------------------
   345                                      .sign_unset:
   346                                      ;---------------------------------------------------------------------------
   347                                      ; Saving RSI and RDI in stack
   348 00000151 56                          push rsi
   349 00000152 57                          push rdi
   350                                      ;---------------------------------------------------------------------------
   351                                      ; End of number buffer in RDI
   352 00000153 488D3C25[44000000]          lea rdi, [NumberBuffer + NumberBufferLen - 1]
   353                                      ;---------------------------------------------------------------------------
   354                                      ; DF flag is set to 1 to write backwards
   355 0000015B FD                          std
   356                                      ;---------------------------------------------------------------------------
   357                                      ; Counter in RBX
   358 0000015C 4831DB                      xor rbx, rbx
   359                                      ;---------------------------------------------------------------------------
   360                                      ; Devider in ECX
   361 0000015F B90A000000                  mov ecx, 10
   362                                      ;---------------------------------------------------------------------------
   363                                      .loop_start:
   364                                          ;-----------------------------------------------------------------------
   365                                          ; Copying lower 32 bits to EAX and higher to EDX to use div
   366 00000164 4489C8                          mov eax, r9d
   367 00000167 4C89CA                          mov rdx, r9
   368 0000016A 48C1EA20                        shr rdx, 32
   369 0000016E F7F1                            div ecx
   370                                          ;-----------------------------------------------------------------------
   371                                          ; Copying quotient to R9
   372 00000170 4989C1                          mov r9, rax
   373                                          ;-----------------------------------------------------------------------
   374                                          ; Writing digit to buffer. The digit is in RDX after div
   375 00000173 8A82[B8000000]                  mov al, [Digits + rdx]
   376 00000179 AA                              stosb
   377                                          ;-----------------------------------------------------------------------
   378                                          ; Incrementing counter of written symbols
   379 0000017A 48FFC3                          inc rbx
   380                                          ;-----------------------------------------------------------------------
   381                                          ; Checking for zero in R9
   382 0000017D 4D85C9                          test r9, r9
   383                                          ;-----------------------------------------------------------------------
   384 00000180 75E2                            jnz .loop_start
   385                                      ;---------------------------------------------------------------------------
   386                                      ; Setting DF flag to write forward with string commands
   387 00000182 FC                          cld
   388                                      ;---------------------------------------------------------------------------
   389                                      ; Address of last written symbol (higher digit) in RSI
   390 00000183 488D7701                    lea rsi, [rdi + 1]
   391                                      ;---------------------------------------------------------------------------
   392                                      ; Resetting RDI to current buffer position
   393 00000187 5F                          pop rdi
   394                                      ;---------------------------------------------------------------------------
   395                                      ; Counter in RCX
   396 00000188 4889D9                      mov rcx, rbx
   397                                      ;---------------------------------------------------------------------------
   398                                      ; Checking if clearing buffer needed
   399 0000018B 4801FB                      add rbx, rdi
   400 0000018E 4881FB[05000000]            cmp rbx, MaxPointer
   401                                      ;---------------------------------------------------------------------------
   402                                      ; Writing buffer to console
   403 00000195 7C05                        jl .skip_clear_buffer
   404 00000197 E848000000                  call ClearBuffer
   405                                      .skip_clear_buffer:
   406                                      ;---------------------------------------------------------------------------
   407                                      ; Copying number buffer to main printf buffer
   408 0000019C F3A4                        rep movsb
   409                                      ;---------------------------------------------------------------------------
   410                                      ; Resetting RSI from stack
   411 0000019E 5E                          pop rsi
   412                                      ;---------------------------------------------------------------------------
   413 0000019F C3                          ret
   414                                  ;===============================================================================
   415                                  
   416                                  
   417                                  ;===============================================================================
   418                                  ; Writes a power of two system number to a buffer
   419                                  ; Expects:  R9  - number
   420                                  ;           RDI - buffer current position
   421                                  ;           R10 - mask
   422                                  ;           CL - shift
   423                                  ; Returns:  None
   424                                  ;-------------------------------------------------------------------------------
   425                                  ToBinPow:
   426                                      ;---------------------------------------------------------------------------
   427                                      ; Saving RSI and RDI in stack
   428 000001A0 56                          push rsi
   429 000001A1 57                          push rdi
   430                                      ;---------------------------------------------------------------------------
   431                                      ; End of number buffer in RDI
   432 000001A2 488D3C25[44000000]          lea rdi, [NumberBuffer + NumberBufferLen - 1]
   433                                      ;---------------------------------------------------------------------------
   434                                      ; Setting DF to 1 to write backwards
   435 000001AA FD                          std
   436                                      ;---------------------------------------------------------------------------
   437                                      ; Counter in RBX
   438 000001AB 4831DB                      xor rbx, rbx
   439                                      ;---------------------------------------------------------------------------
   440                                      .loop_start:
   441                                          ;-----------------------------------------------------------------------
   442                                          ; Copying number to RAX
   443 000001AE 4C89C8                          mov rax, r9
   444                                          ;-----------------------------------------------------------------------
   445                                          ; Applying mask (getting devision reminder)
   446 000001B1 4C21D0                          and rax, r10
   447                                          ;-----------------------------------------------------------------------
   448                                          ; Writing digit to number buffer
   449 000001B4 8A80[B8000000]                  mov al, [Digits + rax]
   450 000001BA AA                              stosb
   451                                          ;-----------------------------------------------------------------------
   452                                          ; Deviding by the power of 2 which is located in CL
   453 000001BB 49D3E9                          shr r9, cl
   454                                          ;-----------------------------------------------------------------------
   455                                          ; Incrementing counter
   456 000001BE 48FFC3                          inc rbx
   457                                          ;-----------------------------------------------------------------------
   458                                          ; Checking R9 for zero
   459 000001C1 4D85C9                          test r9, r9
   460                                          ;-----------------------------------------------------------------------
   461 000001C4 75E8                            jnz .loop_start
   462                                      ;---------------------------------------------------------------------------
   463                                      ; Setting DF to 0 to write forward with string commands
   464 000001C6 FC                          cld
   465                                      ;---------------------------------------------------------------------------
   466                                      ; Address of last written symbol in RSI
   467 000001C7 488D7701                    lea rsi, [rdi + 1]
   468                                      ;---------------------------------------------------------------------------
   469                                      ; Resetting RDI from stack
   470 000001CB 5F                          pop rdi
   471                                      ;---------------------------------------------------------------------------
   472                                      ; Number of digits in RCX
   473 000001CC 4889D9                      mov rcx, rbx
   474                                      ;---------------------------------------------------------------------------
   475                                      ; Checking if there is enough place to number in buffer
   476 000001CF 4801FB                      add rbx, rdi
   477 000001D2 4881FB[05000000]            cmp rbx, MaxPointer
   478                                      ;---------------------------------------------------------------------------
   479                                      ; Writing buffer to console if needed
   480 000001D9 7C05                        jl .skip_clear_buffer
   481 000001DB E804000000                  call ClearBuffer
   482                                      .skip_clear_buffer:
   483                                      ;---------------------------------------------------------------------------
   484                                      ; Copying number buffer to main buffer
   485 000001E0 F3A4                        rep movsb
   486                                      ;---------------------------------------------------------------------------
   487                                      ; Resetting RSI from stack
   488 000001E2 5E                          pop rsi
   489                                      ;---------------------------------------------------------------------------
   490 000001E3 C3                          ret
   491                                  ;===============================================================================
   492                                  
   493                                  ;===============================================================================
   494                                  ; Clearing buffer
   495                                  ;-------------------------------------------------------------------------------
   496                                  ClearBuffer:
   497                                      ;---------------------------------------------------------------------------
   498                                      ; Saving RAX, RSI, RCX and R11 in stack
   499 000001E4 50                          push rax
   500 000001E5 56                          push rsi
   501 000001E6 51                          push rcx
   502 000001E7 4153                        push r11
   503                                      ;---------------------------------------------------------------------------
   504                                      ; Length of output in RDX
   505 000001E9 4889FA                      mov rdx, rdi
   506 000001EC 4881EA[00000000]            sub rdx, Buffer
   507                                      ;---------------------------------------------------------------------------
   508                                      ; write system call in RAX
   509 000001F3 B801000000                  mov rax, 1
   510                                      ;---------------------------------------------------------------------------
   511                                      ; Output file stream in RDI
   512 000001F8 BF01000000                  mov rdi, 1
   513                                      ;---------------------------------------------------------------------------
   514                                      ; Buffer start in RSI
   515 000001FD 48BE-                       mov rsi, Buffer
   515 000001FF [0000000000000000] 
   516                                      ;---------------------------------------------------------------------------
   517                                      ; Writing
   518 00000207 0F05                        syscall
   519                                      ;---------------------------------------------------------------------------
   520                                      ; Resetting registers from stack
   521 00000209 415B                        pop r11
   522 0000020B 59                          pop rcx
   523 0000020C 5E                          pop rsi
   524 0000020D 58                          pop rax
   525                                      ;---------------------------------------------------------------------------
   526                                      ; New value of RDI is buffer start
   527 0000020E 48BF-                       mov rdi, Buffer
   527 00000210 [0000000000000000] 
   528                                      ;---------------------------------------------------------------------------
   529 00000218 C3                          ret
   530                                  ;===============================================================================
   531                                  
   532                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   533                                  section .rodata
   534                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   535                                  
   536                                  ;===============================================================================
   537                                  ; Jump table for printf specifiers
   538                                  ;-------------------------------------------------------------------------------
   539                                  JmpTableSpecifiers:
   540 00000000 [8A00000000000000]                      dq MyPrintf_cdecl.specifier_binary            ; b
   541 00000008 [8000000000000000]                      dq MyPrintf_cdecl.specifier_character         ; c
   542 00000010 [D200000000000000]                      dq MyPrintf_cdecl.specifier_decimal           ; d
   543 00000018 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; e
   544 00000020 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; f
   545 00000028 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; g
   546 00000030 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; h
   547 00000038 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; i
   548 00000040 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; j
   549 00000048 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; k
   550 00000050 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; l
   551 00000058 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; m
   552 00000060 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; n
   553 00000068 [B800000000000000]                      dq MyPrintf_cdecl.specifier_octal             ; o
   554 00000070 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; p
   555 00000078 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; q
   556 00000080 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; r
   557 00000088 [E400000000000000]                      dq MyPrintf_cdecl.specifier_string            ; s
   558 00000090 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; t
   559 00000098 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; u
   560 000000A0 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; v
   561 000000A8 [7200000000000000]                      dq MyPrintf_cdecl.specifier_default           ; w
   562 000000B0 [A100000000000000]                      dq MyPrintf_cdecl.specifier_hexadecimal       ; x
   563                                  ;===============================================================================
   564                                  
   565                                  ;===============================================================================
   566                                  ; Array of digits used in numbers printing
   567                                  ;-------------------------------------------------------------------------------
   568 000000B8 303132333435363738-     Digits db "0123456789ABCDEF"
   568 000000C1 39414243444546     
   569                                  ;===============================================================================
   570                                  
   571                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   572                                  section .data
   573                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   574                                  
   575                                  ;===============================================================================
   576                                  ; Printf buffer
   577                                  ;-------------------------------------------------------------------------------
   578 00000000 0000000000              Buffer          db 5 dup(0)
   579                                  MaxPointer      equ $
   580                                  ;===============================================================================
   581                                  
   582                                  ;===============================================================================
   583                                  ; Buffer to write numbers. Must be at leat 64 bytes long to store bin numbers
   584                                  ;-------------------------------------------------------------------------------
   585 00000005 000000000000000000-     NumberBuffer:   db 64 dup(0)
   585 0000000E 000000000000000000-
   585 00000017 000000000000000000-
   585 00000020 000000000000000000-
   585 00000029 000000000000000000-
   585 00000032 000000000000000000-
   585 0000003B 000000000000000000-
   585 00000044 00                 
   586                                  NumberBufferLen equ $ - NumberBuffer
   587                                  ;===============================================================================
   588                                  
   589                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   590                                  section .note.GNU-stack noalloc noexec nowrite progbits
   591                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
