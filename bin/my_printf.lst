     1                                  ;===============================================================================
     2                                  ; Globals
     3                                  global MyPrintf
     4                                  ;===============================================================================
     5                                  
     6                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     7                                  section .text
     8                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     9                                  
    10                                  ;===============================================================================
    11                                  ; Trampline for printf
    12                                  ;-------------------------------------------------------------------------------
    13                                  MyPrintf:
    14                                  ;    d   d   d   d   d   d   d   d   i   i   i   d   d   i   i   i   i   i   d   d   i
    15                                  ;    x1  x2  x3  x4  x5  x6  x7  x8  r1  r2  r3  s0  s1  r4  r5  s2  s3  s4  s5  s6  s7
    16                                  ;   -----------------------------------------------------------------------------------
    17                                  ;    s0  s1  s2  s3  s4  s5  s6  s7  s8  s9  s10 s13 s14 s11 s12 s15 s16 s17 s18 s19 s20
    18                                  ;
    19                                  ;
    20                                  ;
    21                                  ;
    22                                  ;
    23                                  
    24                                      ;---------------------------------------------------------------------------
    25                                      ; Saving return address in R11
    26 00000000 415B                        pop r11
    27                                      ;---------------------------------------------------------------------------
    28                                      ; Pushing arguements which may be used in printf to stack
    29                                      ; Stack will be used later as an array of arguments
    30 00000002 4151                        push r9
    31 00000004 4150                        push r8
    32 00000006 51                          push rcx
    33 00000007 52                          push rdx
    34 00000008 56                          push rsi
    35                                      ;---------------------------------------------------------------------------
    36                                      ; Copying format string address to RSI from RDI (it is always 1st parameter)
    37 00000009 4889FE                      mov rsi, rdi
    38                                      ;---------------------------------------------------------------------------
    39                                      ; Saving XMM registers in stack
    40 0000000C 488D6424C0                  lea rsp, [rsp - 8 * 8]
    41 00000011 660FD60424                  movq [rsp + 8 * 0], xmm0
    42 00000016 660FD64C2408                movq [rsp + 8 * 1], xmm1
    43 0000001C 660FD6542410                movq [rsp + 8 * 2], xmm2
    44 00000022 660FD65C2418                movq [rsp + 8 * 3], xmm3
    45 00000028 660FD6642420                movq [rsp + 8 * 4], xmm4
    46 0000002E 660FD66C2428                movq [rsp + 8 * 5], xmm5
    47 00000034 660FD6742430                movq [rsp + 8 * 6], xmm6
    48 0000003A 660FD67C2438                movq [rsp + 8 * 7], xmm7
    49                                      ;---------------------------------------------------------------------------
    50                                      ; Pushing registers that we need to save
    51 00000040 53                          push rbx
    52 00000041 55                          push rbp
    53 00000042 4154                        push r12
    54 00000044 4155                        push r13
    55 00000046 4156                        push r14
    56 00000048 4157                        push r15
    57                                      ;---------------------------------------------------------------------------
    58                                      ; Address of first default parameter in RBP
    59 0000004A 488D6C2470                  lea rbp, [rsp + 8 * (6 + 8)]
    60                                      ;---------------------------------------------------------------------------
    61                                      ; Address of first double parameter in R8
    62 0000004F 4C8D442430                  lea r8, [rsp + 8 * (6 + 0)]
    63                                      ;---------------------------------------------------------------------------
    64                                      ; Jumping to printf which uses (all arguements are in stack)
    65 00000054 EB11                        jmp MyPrintf_cdecl
    66                                      ;---------------------------------------------------------------------------
    67                                      ; Address to printf end
    68                                      .trampline_back:
    69                                      ;---------------------------------------------------------------------------
    70                                      ; Resetting registers that we need to save from stack
    71 00000056 415F                        pop r15
    72 00000058 415E                        pop r14
    73 0000005A 415D                        pop r13
    74 0000005C 415C                        pop r12
    75 0000005E 5D                          pop rbp
    76 0000005F 5B                          pop rbx
    77                                      ;---------------------------------------------------------------------------
    78                                      ; Deleting arguments that we pushed
    79 00000060 4883C468                    add rsp, 8 * (5 + 8)
    80                                      ;---------------------------------------------------------------------------
    81                                      ; Returning to caller
    82 00000064 41FFE3                      jmp r11
    83                                  ;===============================================================================
    84                                  
    85                                  ;===============================================================================
    86                                  ; This macro outputs AL n times
    87                                  ; Expects:          RCX - number of times to output AL(it is expected to be < 64)
    88                                  ; Returns:          None
    89                                  ; Destroys:         RCX
    90                                  ;-------------------------------------------------------------------------------
    91                                  %macro PutAL_NTimes 0
    92                                      add rcx, rdi
    93                                      cmp rcx, MaxPointer
    94                                      jl %%skip_clear_buffer
    95                                          call ClearBuffer
    96                                      %%skip_clear_buffer:
    97                                      sub rcx, rdi
    98                                      rep stosb
    99                                  %endmacro
   100                                  ;===============================================================================
   101                                  
   102                                  ;===============================================================================
   103                                  ; This macro outputs AL 1 time
   104                                  ; Expects:          None
   105                                  ; Returns:          None
   106                                  ;-------------------------------------------------------------------------------
   107                                  %macro PutAL 0
   108                                      cmp rdi, MaxPointer
   109                                      jl %%skip_clear_buffer
   110                                          call ClearBuffer
   111                                      %%skip_clear_buffer:
   112                                      stosb
   113                                  %endmacro
   114                                  ;===============================================================================
   115                                  
   116                                  ;===============================================================================
   117                                  ; This macro outputs AL 1 time
   118                                  ; Expects:          RDI - dest buffer
   119                                  ;                   RSI - source buffer
   120                                  ;                   %1  - max address to compare with
   121                                  ;                   RCX - number of symbols
   122                                  ; Returns:          None
   123                                  ;-------------------------------------------------------------------------------
   124                                  %macro CopyStrToBuf 1
   125                                      add rdi, rcx
   126                                      cmp rdi, %1
   127                                      jl %%skip_clear_buffer
   128                                          call ClearBuffer
   129                                      %%skip_clear_buffer:
   130                                      sub rdi, rcx
   131                                      rep movsb
   132                                  %endmacro
   133                                  ;===============================================================================
   134                                  
   135                                  ;===============================================================================
   136                                  ; String length (0 is end)
   137                                  ; Expects:          R9  - string address
   138                                  ; Returns:          RCX - length of string
   139                                  ;-------------------------------------------------------------------------------
   140                                  %macro Strlen 0
   141                                      ;---------------------------------------------------------------------------
   142                                      ; Saving RDI in stack
   143                                      push rdi
   144                                      ;---------------------------------------------------------------------------
   145                                      ; Copying string address to RDI
   146                                      mov rdi, r9
   147                                      ;---------------------------------------------------------------------------
   148                                      ; String terminating symbol in AL
   149                                      mov al, 0
   150                                      ;---------------------------------------------------------------------------
   151                                      ; Max number of bytes to read in RCX (-1 = MAX_UNSIGNED)
   152                                      mov rcx, -1
   153                                      ;---------------------------------------------------------------------------
   154                                      ; Running until current byte is zero
   155                                      repne scasb
   156                                      ;---------------------------------------------------------------------------
   157                                      ; Reversing RCX to get number of bytes
   158                                      not rcx
   159                                      ;---------------------------------------------------------------------------
   160                                      ; Resetting RDI from stack
   161                                      pop rdi
   162                                  %endmacro
   163                                  ;===============================================================================
   164                                  
   165                                  ;===============================================================================
   166                                  ; Macro which moves arguements to needed registers and calls writing number
   167                                  ; Expects:          %1 - mask
   168                                  ;                   %2 - shift
   169                                  ;-------------------------------------------------------------------------------
   170                                  %macro HandleBinPowerNum 2
   171                                      call GetArgDefault
   172                                      ;---------------------------------------------------------------------------
   173                                      ; Mask to R10
   174                                      mov r10, %1
   175                                      ;---------------------------------------------------------------------------
   176                                      ; Shift in CL (deviding by 8 every time)
   177                                      mov cl, %2
   178                                      ;---------------------------------------------------------------------------
   179                                      ; Writing number to buffer
   180                                      call ToBinPow
   181                                      ;---------------------------------------------------------------------------
   182                                      ; Going to next symbol in printf main loop
   183                                      jmp .loop_start
   184                                  %endmacro
   185                                  ;===============================================================================
   186                                  
   187                                  ;===============================================================================
   188                                  ; Function with formatted print. Supported specifiers are:
   189                                  ; |%c|x|
   190                                  ; |%b|x|
   191                                  ; |%x|x|
   192                                  ; |%o|x|
   193                                  ; |%%|x|
   194                                  ; |%d|x|
   195                                  ; |%s|x|
   196                                  ; Expects:          STACK[ 0 ]  - format string address
   197                                  ;                   STACK[...]  - arguments
   198                                  ; Returns:          None
   199                                  ;-------------------------------------------------------------------------------
   200                                  MyPrintf_cdecl:
   201                                      ;---------------------------------------------------------------------------
   202                                      ; Setting RAX to zeros
   203 00000067 4831C0                      xor rax, rax
   204                                      ;---------------------------------------------------------------------------
   205                                      ; Saving buffer address to RDI
   206 0000006A 48BF-                       mov rdi, Buffer
   206 0000006C [0000000000000000] 
   207                                      ;---------------------------------------------------------------------------
   208                                      ; Main loop through characters
   209                                      ; WARNING: IT IS EXPECTED THAT ALL BYTES OF RAX EXCEPT THE LOWEST ARE ZEROS
   210                                      .loop_start:
   211                                          ;-----------------------------------------------------------------------
   212                                          ; Reading symbol
   213 00000074 AC                              lodsb
   214                                          ;-----------------------------------------------------------------------
   215                                          ; Checking if specifier
   216 00000075 3C25                            cmp al, '%'
   217 00000077 7415                            je .specifier_handle
   218                                          ;-----------------------------------------------------------------------
   219                                          ; Checking if string ends
   220 00000079 84C0                            test al, al
   221 0000007B 7427                            jz .printf_end
   222                                          ;-----------------------------------------------------------------------
   223                                          ; Checking if end of buffer reached and writing symbol to buffer
   224                                          .add_symbol:
   225                                          PutAL
   108 0000007D 4881FF[40000000]    <1>  cmp rdi, MaxPointer
   109 00000084 7C05                <1>  jl %%skip_clear_buffer
   110 00000086 E8AE010000          <1>  call ClearBuffer
   111                              <1>  %%skip_clear_buffer:
   112 0000008B AA                  <1>  stosb
   226                                          ;-----------------------------------------------------------------------
   227 0000008C EBE6                            jmp .loop_start
   228                                          ;-----------------------------------------------------------------------
   229                                          ; Writing specifier
   230                                          .specifier_handle:
   231                                              ;-------------------------------------------------------------------
   232                                              ; Reading specifying character
   233 0000008E AC                                  lodsb
   234                                              ;-------------------------------------------------------------------
   235                                              ; Going to write if %%
   236 0000008F 3C25                                cmp al, '%'
   237 00000091 74EA                                je .add_symbol
   238                                              ;-------------------------------------------------------------------
   239                                              ; Checking that in jump table bounds
   240 00000093 3C62                                cmp al, 'b'
   241 00000095 7C14                                jl .specifier_default
   242 00000097 3C78                                cmp al, 'x'
   243 00000099 7710                                ja .specifier_default
   244                                              ;-------------------------------------------------------------------
   245                                              ; Subtracting to get index
   246 0000009B 2C62                                sub al, 'b'
   247                                              ;-------------------------------------------------------------------
   248                                              ; Jump table jump to the handler of specifier
   249 0000009D FF24C5[00000000]                    jmp [JmpTableSpecifiers + 8 * rax]
   250                                      ;---------------------------------------------------------------------------
   251                                      .printf_end:
   252                                      ;---------------------------------------------------------------------------
   253                                      ; Writing buffer to console
   254 000000A4 E890010000                  call ClearBuffer
   255                                      ;---------------------------------------------------------------------------
   256                                      ; End of printf
   257 000000A9 EBAB                        jmp MyPrintf.trampline_back
   258                                  ;===============================================================================
   259                                  ; This is printf section with specifiers switch handlers
   260                                  ;-------------------------------------------------------------------------------
   261                                  ; Default
   262                                  ;-------------------------------------------------------------------------------
   263                                      .specifier_default:
   264                                          ;-----------------------------------------------------------------------
   265                                          ; Adding the symbol after % and the % to buffer
   266 000000AB 88C4                            mov ah, al
   267 000000AD 80C462                          add ah, 'b'
   268 000000B0 B025                            mov al, '%'
   269 000000B2 66AB                            stosw
   270                                          ;-----------------------------------------------------------------------
   271                                          ; Resetting RAX register to zero
   272 000000B4 4831C0                          xor rax, rax
   273                                          ;-----------------------------------------------------------------------
   274                                          ; Going to the next symbol in string (start of main printf loop)
   275 000000B7 EBBB                            jmp .loop_start
   276                                  
   277                                  ;-------------------------------------------------------------------------------
   278                                  ; Charecter
   279                                  ;-------------------------------------------------------------------------------
   280                                      .specifier_character:
   281                                          ;-----------------------------------------------------------------------
   282                                          ; Reading symbol to AL from stack
   283 000000B9 E86D020000                      call GetArgDefault
   284 000000BE 4488C8                          mov al, r9b
   285                                          ;-----------------------------------------------------------------------
   286                                          ; Going to adding symbol and checking the size in printf main loop
   287 000000C1 EBBA                            jmp .add_symbol
   288                                  
   289                                  ;-------------------------------------------------------------------------------
   290                                  ; Binary number
   291                                  ;-------------------------------------------------------------------------------
   292                                      .specifier_binary:
   293                                          HandleBinPowerNum 0x1, 1
   171 000000C3 E863020000          <1>  call GetArgDefault
   172                              <1> 
   173                              <1> 
   174 000000C8 41BA01000000        <1>  mov r10, %1
   175                              <1> 
   176                              <1> 
   177 000000CE B101                <1>  mov cl, %2
   178                              <1> 
   179                              <1> 
   180 000000D0 E81D010000          <1>  call ToBinPow
   181                              <1> 
   182                              <1> 
   183 000000D5 EB9D                <1>  jmp .loop_start
   294                                  
   295                                  ;-------------------------------------------------------------------------------
   296                                  ; Hexadecimal number
   297                                  ;-------------------------------------------------------------------------------
   298                                      .specifier_hexadecimal:
   299                                          HandleBinPowerNum 0xf, 4
   171 000000D7 E84F020000          <1>  call GetArgDefault
   172                              <1> 
   173                              <1> 
   174 000000DC 41BA0F000000        <1>  mov r10, %1
   175                              <1> 
   176                              <1> 
   177 000000E2 B104                <1>  mov cl, %2
   178                              <1> 
   179                              <1> 
   180 000000E4 E809010000          <1>  call ToBinPow
   181                              <1> 
   182                              <1> 
   183 000000E9 EB89                <1>  jmp .loop_start
   300                                  
   301                                  ;-------------------------------------------------------------------------------
   302                                  ; Octal number
   303                                  ;-------------------------------------------------------------------------------
   304                                      .specifier_octal:
   305                                          HandleBinPowerNum 0x7, 3
   171 000000EB E83B020000          <1>  call GetArgDefault
   172                              <1> 
   173                              <1> 
   174 000000F0 41BA07000000        <1>  mov r10, %1
   175                              <1> 
   176                              <1> 
   177 000000F6 B103                <1>  mov cl, %2
   178                              <1> 
   179                              <1> 
   180 000000F8 E8F5000000          <1>  call ToBinPow
   181                              <1> 
   182                              <1> 
   183 000000FD E972FFFFFF          <1>  jmp .loop_start
   306                                  
   307                                  ;-------------------------------------------------------------------------------
   308                                  ; Decimal number
   309                                  ;-------------------------------------------------------------------------------
   310                                      .specifier_decimal:
   311                                          ;-----------------------------------------------------------------------
   312                                          ; Reading number to R9 from stack
   313 00000102 E824020000                      call GetArgDefault
   314                                          ;-----------------------------------------------------------------------
   315                                          ; Writing number in decimal form to buffer
   316 00000107 E87B000000                      call ToDec
   317                                          ;-----------------------------------------------------------------------
   318                                          ; Going to next symbol in printf main loop
   319 0000010C E963FFFFFF                      jmp .loop_start
   320                                  
   321                                  ;-------------------------------------------------------------------------------
   322                                  ; String
   323                                  ;-------------------------------------------------------------------------------
   324                                      .specifier_string:
   325                                          ;-----------------------------------------------------------------------
   326                                          ; Reading string address to R9 from stack
   327 00000111 E815020000                      call GetArgDefault
   328                                          ;-----------------------------------------------------------------------
   329                                          ; Counting number of bytes in string
   330                                          Strlen
   141                              <1> 
   142                              <1> 
   143 00000116 57                  <1>  push rdi
   144                              <1> 
   145                              <1> 
   146 00000117 4C89CF              <1>  mov rdi, r9
   147                              <1> 
   148                              <1> 
   149 0000011A B000                <1>  mov al, 0
   150                              <1> 
   151                              <1> 
   152 0000011C 48C7C1FFFFFFFF      <1>  mov rcx, -1
   153                              <1> 
   154                              <1> 
   155 00000123 F2AE                <1>  repne scasb
   156                              <1> 
   157                              <1> 
   158 00000125 48F7D1              <1>  not rcx
   159                              <1> 
   160                              <1> 
   161 00000128 5F                  <1>  pop rdi
   331                                          ;-----------------------------------------------------------------------
   332                                          ; Comparing it with max availeble address
   333 00000129 4889C8                          mov rax, rcx
   334 0000012C 4801F8                          add rax, rdi
   335 0000012F 483D[40000000]                  cmp rax, MaxPointer
   336 00000135 7C27                            jl .write_buffer
   337                                          ;-----------------------------------------------------------------------
   338                                          ; Outputting string to console with syscall if we can't put it in
   339                                          ; buffer
   340                                          ;-----------------------------------------------------------------------
   341                                              ; Clearing buffer
   342 00000137 E8FD000000                          call ClearBuffer
   343                                              ;-------------------------------------------------------------------
   344                                              ; Saving RDI and RSI
   345 0000013C 57                                  push rdi
   346 0000013D 56                                  push rsi
   347                                              ;-------------------------------------------------------------------
   348                                              ; RAX = write system call
   349 0000013E B801000000                          mov rax, 1
   350                                              ;-------------------------------------------------------------------
   351                                              ; RDI = file stream
   352 00000143 BF01000000                          mov rdi, 1
   353                                              ;-------------------------------------------------------------------
   354                                              ; RSI = string pointer
   355 00000148 4C89CE                              mov rsi, r9
   356                                              ;-------------------------------------------------------------------
   357                                              ; RDX = number of bytes to print
   358 0000014B 4889CA                              mov rdx, rcx
   359                                              ;-------------------------------------------------------------------
   360                                              ; Calling writing of string
   361 0000014E 4153                                push r11
   362 00000150 0F05                                syscall
   363 00000152 415B                                pop r11
   364                                              ;-------------------------------------------------------------------
   365                                              ; Resetting registers
   366 00000154 5E                                  pop rsi
   367 00000155 5F                                  pop rdi
   368                                          ;-----------------------------------------------------------------------
   369                                          ; Going to next symbol in main printf loop
   370 00000156 4831C0                          xor rax, rax
   371 00000159 E916FFFFFF                      jmp .loop_start
   372                                          .write_buffer:
   373                                          ;-----------------------------------------------------------------------
   374                                          ; Adding string to buffer
   375                                          ;-----------------------------------------------------------------------
   376                                              ; Saving RSI
   377 0000015E 56                                  push rsi
   378                                              ;-------------------------------------------------------------------
   379                                              ; Copying string address to RSI
   380 0000015F 4C89CE                              mov rsi, r9
   381                                              ;-------------------------------------------------------------------
   382                                              ; Copying string to printf buffer
   383 00000162 F3A4                                rep movsb
   384                                              ;-------------------------------------------------------------------
   385                                              ; Resetting RSI
   386 00000164 5E                                  pop rsi
   387                                          ;-----------------------------------------------------------------------
   388                                          ; Going to next symbol in main printf loop
   389 00000165 4831C0                          xor rax, rax
   390 00000168 E907FFFFFF                      jmp .loop_start
   391                                  ;-------------------------------------------------------------------------------
   392                                  ; Double value
   393                                  ;-------------------------------------------------------------------------------
   394                                      .specifier_float:
   395 0000016D E8EC010000                      call GetArgDouble
   396 00000172 41BA01000000                    mov r10, 1
   397 00000178 B101                            mov cl, 1
   398 0000017A E8ED000000                      call PrintDouble
   399 0000017F 4831C0                          xor rax, rax
   400 00000182 E9EDFEFFFF                      jmp .loop_start
   401                                  ;===============================================================================
   402                                  
   403                                  ;===============================================================================
   404                                  ; Writes decimal number to a buffer
   405                                  ; Expects:  R9 - number to write
   406                                  ; Returns:  None
   407                                  ;-------------------------------------------------------------------------------
   408                                  ToDec:
   409                                      ;---------------------------------------------------------------------------
   410                                      ; Checking if number is negative
   411 00000187 4D85C9                      test r9, r9
   412                                      ;---------------------------------------------------------------------------
   413 0000018A 7917                        jns .sign_unset
   414                                          ;-----------------------------------------------------------------------
   415                                          ; Writing '-' to buffer
   416 0000018C B02D                            mov al, '-'
   417                                          PutAL
   108 0000018E 4881FF[40000000]    <1>  cmp rdi, MaxPointer
   109 00000195 7C05                <1>  jl %%skip_clear_buffer
   110 00000197 E89D000000          <1>  call ClearBuffer
   111                              <1>  %%skip_clear_buffer:
   112 0000019C AA                  <1>  stosb
   418                                          ;-----------------------------------------------------------------------
   419                                          ; Reversing numbers sign
   420 0000019D 49F7D1                          not r9
   421 000001A0 49FFC1                          inc r9
   422                                          ;-----------------------------------------------------------------------
   423                                      .sign_unset:
   424                                      ;---------------------------------------------------------------------------
   425                                      ; Saving RSI and RDI in stack
   426 000001A3 56                          push rsi
   427 000001A4 57                          push rdi
   428                                      ;---------------------------------------------------------------------------
   429                                      ; End of number buffer in RDI
   430 000001A5 488D3C25[7F000000]          lea rdi, [NumberBuffer + NumberBufferLen - 1]
   431                                      ;---------------------------------------------------------------------------
   432                                      ; DF flag is set to 1 to write backwards
   433 000001AD FD                          std
   434                                      ;---------------------------------------------------------------------------
   435                                      ; Counter in RBX
   436 000001AE 4831C9                      xor rcx, rcx
   437                                      ;---------------------------------------------------------------------------
   438                                      ; Devider in ECX
   439 000001B1 BB0A000000                  mov ebx, 10
   440                                      ;---------------------------------------------------------------------------
   441                                      .loop_start:
   442                                          ;-----------------------------------------------------------------------
   443                                          ; Copying lower 32 bits to EAX and higher to EDX to use div
   444 000001B6 4489C8                          mov eax, r9d
   445 000001B9 4C89CA                          mov rdx, r9
   446 000001BC 48C1EA20                        shr rdx, 32
   447 000001C0 F7F3                            div ebx
   448                                          ;-----------------------------------------------------------------------
   449                                          ; Copying quotient to R9
   450 000001C2 4989C1                          mov r9, rax
   451                                          ;-----------------------------------------------------------------------
   452                                          ; Writing digit to buffer. The digit is in RDX after div
   453 000001C5 8A82[C0000000]                  mov al, [Digits + rdx]
   454 000001CB AA                              stosb
   455                                          ;-----------------------------------------------------------------------
   456                                          ; Incrementing counter of written symbols
   457 000001CC 48FFC1                          inc rcx
   458                                          ;-----------------------------------------------------------------------
   459                                          ; Checking for zero in R9
   460 000001CF 4D85C9                          test r9, r9
   461                                          ;-----------------------------------------------------------------------
   462 000001D2 75E2                            jnz .loop_start
   463                                      ;---------------------------------------------------------------------------
   464                                      ; Setting DF flag to write forward with string commands
   465 000001D4 FC                          cld
   466                                      ;---------------------------------------------------------------------------
   467                                      ; Address of last written symbol (higher digit) in RSI
   468 000001D5 488D7701                    lea rsi, [rdi + 1]
   469                                      ;---------------------------------------------------------------------------
   470                                      ; Resetting RDI to current buffer position
   471 000001D9 5F                          pop rdi
   472                                      ;---------------------------------------------------------------------------
   473                                      ; Checking if there is enough place to number in buffer and writing
   474                                      CopyStrToBuf MaxPointer
   125 000001DA 4801CF              <1>  add rdi, rcx
   126 000001DD 4881FF[40000000]    <1>  cmp rdi, %1
   127 000001E4 7C05                <1>  jl %%skip_clear_buffer
   128 000001E6 E84E000000          <1>  call ClearBuffer
   129                              <1>  %%skip_clear_buffer:
   130 000001EB 4829CF              <1>  sub rdi, rcx
   131 000001EE F3A4                <1>  rep movsb
   475                                      ;---------------------------------------------------------------------------
   476                                      ; Resetting RSI from stack
   477 000001F0 5E                          pop rsi
   478                                      ;---------------------------------------------------------------------------
   479 000001F1 C3                          ret
   480                                  ;===============================================================================
   481                                  
   482                                  
   483                                  ;===============================================================================
   484                                  ; Writes a power of two system number to a buffer
   485                                  ; Expects:  R9  - number
   486                                  ;           RDI - buffer current position
   487                                  ;           R10 - mask
   488                                  ;           CL - shift
   489                                  ; Returns:  None
   490                                  ;-------------------------------------------------------------------------------
   491                                  ToBinPow:
   492                                      ;---------------------------------------------------------------------------
   493                                      ; Saving RSI and RDI in stack
   494 000001F2 56                          push rsi
   495 000001F3 57                          push rdi
   496                                      ;---------------------------------------------------------------------------
   497                                      ; End of number buffer in RDI
   498 000001F4 488D3C25[7F000000]          lea rdi, [NumberBuffer + NumberBufferLen - 1]
   499                                      ;---------------------------------------------------------------------------
   500                                      ; Setting DF to 1 to write backwards
   501 000001FC FD                          std
   502                                      ;---------------------------------------------------------------------------
   503                                      ; Counter in RBX
   504 000001FD 4831DB                      xor rbx, rbx
   505                                      ;---------------------------------------------------------------------------
   506                                      .loop_start:
   507                                          ;-----------------------------------------------------------------------
   508                                          ; Copying number to RAX
   509 00000200 4C89C8                          mov rax, r9
   510                                          ;-----------------------------------------------------------------------
   511                                          ; Applying mask (getting devision reminder)
   512 00000203 4C21D0                          and rax, r10
   513                                          ;-----------------------------------------------------------------------
   514                                          ; Writing digit to number buffer
   515 00000206 8A80[C0000000]                  mov al, [Digits + rax]
   516 0000020C AA                              stosb
   517                                          ;-----------------------------------------------------------------------
   518                                          ; Deviding by the power of 2 which is located in CL
   519 0000020D 49D3E9                          shr r9, cl
   520                                          ;-----------------------------------------------------------------------
   521                                          ; Incrementing counter
   522 00000210 48FFC3                          inc rbx
   523                                          ;-----------------------------------------------------------------------
   524                                          ; Checking R9 for zero
   525 00000213 4D85C9                          test r9, r9
   526                                          ;-----------------------------------------------------------------------
   527 00000216 75E8                            jnz .loop_start
   528                                      ;---------------------------------------------------------------------------
   529                                      ; Setting DF to 0 to write forward with string commands
   530 00000218 FC                          cld
   531                                      ;---------------------------------------------------------------------------
   532                                      ; Address of last written symbol in RSI
   533 00000219 488D7701                    lea rsi, [rdi + 1]
   534                                      ;---------------------------------------------------------------------------
   535                                      ; Counter in RCX
   536 0000021D 4889D9                      mov rcx, rbx
   537                                      ;---------------------------------------------------------------------------
   538                                      ; Resetting RDI from stack
   539 00000220 5F                          pop rdi
   540                                      ;---------------------------------------------------------------------------
   541                                      ; Checking if there is enough place to number in buffer and writing
   542                                      CopyStrToBuf MaxPointer
   125 00000221 4801CF              <1>  add rdi, rcx
   126 00000224 4881FF[40000000]    <1>  cmp rdi, %1
   127 0000022B 7C05                <1>  jl %%skip_clear_buffer
   128 0000022D E807000000          <1>  call ClearBuffer
   129                              <1>  %%skip_clear_buffer:
   130 00000232 4829CF              <1>  sub rdi, rcx
   131 00000235 F3A4                <1>  rep movsb
   543                                      ;---------------------------------------------------------------------------
   544                                      ; Resetting RSI from stack
   545 00000237 5E                          pop rsi
   546                                      ;---------------------------------------------------------------------------
   547 00000238 C3                          ret
   548                                  ;===============================================================================
   549                                  
   550                                  ;===============================================================================
   551                                  ; Clearing buffer
   552                                  ;-------------------------------------------------------------------------------
   553                                  ClearBuffer:
   554                                      ;---------------------------------------------------------------------------
   555                                      ; Saving RAX, RSI, RCX and R11 in stack
   556 00000239 50                          push rax
   557 0000023A 56                          push rsi
   558 0000023B 51                          push rcx
   559 0000023C 4153                        push r11
   560                                      ;---------------------------------------------------------------------------
   561                                      ; Length of output in RDX
   562 0000023E 4889FA                      mov rdx, rdi
   563 00000241 4881EA[00000000]            sub rdx, Buffer
   564                                      ;---------------------------------------------------------------------------
   565                                      ; write system call in RAX
   566 00000248 B801000000                  mov rax, 1
   567                                      ;---------------------------------------------------------------------------
   568                                      ; Output file stream in RDI
   569 0000024D BF01000000                  mov rdi, 1
   570                                      ;---------------------------------------------------------------------------
   571                                      ; Buffer start in RSI
   572 00000252 48BE-                       mov rsi, Buffer
   572 00000254 [0000000000000000] 
   573                                      ;---------------------------------------------------------------------------
   574                                      ; Writing
   575 0000025C 0F05                        syscall
   576                                      ;---------------------------------------------------------------------------
   577                                      ; Resetting registers from stack
   578 0000025E 415B                        pop r11
   579 00000260 59                          pop rcx
   580 00000261 5E                          pop rsi
   581 00000262 58                          pop rax
   582                                      ;---------------------------------------------------------------------------
   583                                      ; New value of RDI is buffer start
   584 00000263 488D3C25[00000000]          lea rdi, [Buffer]
   585                                      ;---------------------------------------------------------------------------
   586 0000026B C3                          ret
   587                                  ;===============================================================================
   588                                  
   589                                  ;===============================================================================
   590                                  ; Prints double value
   591                                  ;-------------------------------------------------------------------------------
   592                                  PrintDouble:
   593                                      ;---------------------------------------------------------------------------
   594                                      ; Copying XMM0 value to RAX and checking the sign bit
   595 0000026C 66480F7EC0                  movq rax, xmm0
   596 00000271 4885C0                      test rax, rax
   597                                      ;---------------------------------------------------------------------------
   598 00000274 791D                        jns .not_negative
   599                                          ;-----------------------------------------------------------------------
   600                                          ; Printing -
   601 00000276 B02D                            mov al, '-'
   602                                          PutAL
   108 00000278 4881FF[40000000]    <1>  cmp rdi, MaxPointer
   109 0000027F 7C05                <1>  jl %%skip_clear_buffer
   110 00000281 E8B3FFFFFF          <1>  call ClearBuffer
   111                              <1>  %%skip_clear_buffer:
   112 00000286 AA                  <1>  stosb
   603                                          ;-----------------------------------------------------------------------
   604                                          ; XMM0 = 0 - XMM0
   605 00000287 660F57C9                        xorpd xmm1, xmm1
   606 0000028B F20F5CC8                        subsd xmm1, xmm0
   607 0000028F F30F7EC1                        movq xmm0, xmm1
   608                                          ;-----------------------------------------------------------------------
   609                                      .not_negative:
   610                                      ;---------------------------------------------------------------------------
   611                                      ; Copying XMM0 value to XMM1
   612 00000293 F30F7EC8                    movq xmm1, xmm0
   613                                      ;---------------------------------------------------------------------------
   614                                      ; Rounding XMM1 towards zeros
   615 00000297 F24C0F2CC9                  cvttsd2si r9, xmm1
   616 0000029C F2490F2AC9                  cvtsi2sd xmm1, r9
   617                                      ;---------------------------------------------------------------------------
   618                                      ; Fraction in XMM0
   619 000002A1 F20F5CC1                    subsd xmm0, xmm1
   620                                      ;---------------------------------------------------------------------------
   621                                      ; Muplyplying XMM0 by 10 SYMBOLS_IN_FRAC times
   622 000002A5 B906000000                  mov rcx, SYMBOLS_IN_FRAC
   623 000002AA F30F7E0C25-                 movq xmm1, [ValueOf10]
   623 000002AF [B8000000]         
   624                                      .multiplying_loop:
   625 000002B3 F20F59C1                        mulsd xmm0, xmm1
   626 000002B7 E2FA                        loop .multiplying_loop
   627                                      ;---------------------------------------------------------------------------
   628                                      ; Rounding the fraction and translating it into and integer in stack
   629 000002B9 660F3A0BC000                roundsd xmm0, xmm0, 0
   630 000002BF F2480F2CC0                  cvttsd2si rax, xmm0
   631 000002C4 50                          push rax
   632                                      ;---------------------------------------------------------------------------
   633                                      ; This string is here to avoid splitting double values to different buffers
   634                                      ; //TODO refactor it
   635 000002C5 E86FFFFFFF                  call ClearBuffer
   636                                      ;---------------------------------------------------------------------------
   637                                      ; Printing the integer part of the number
   638 000002CA E8B8FEFFFF                  call ToDec
   639                                      ;---------------------------------------------------------------------------
   640                                      ; Drawing separating point
   641 000002CF B02E                        mov al, '.'
   642                                      PutAL
   108 000002D1 4881FF[40000000]    <1>  cmp rdi, MaxPointer
   109 000002D8 7C05                <1>  jl %%skip_clear_buffer
   110 000002DA E85AFFFFFF          <1>  call ClearBuffer
   111                              <1>  %%skip_clear_buffer:
   112 000002DF AA                  <1>  stosb
   643                                      ;---------------------------------------------------------------------------
   644                                      ; Getting fraction to R9 from stack, copying its value to R10
   645 000002E0 4159                        pop r9
   646 000002E2 4D89CA                      mov r10, r9
   647                                      ;---------------------------------------------------------------------------
   648                                      ; Counter in RCX
   649 000002E5 4831C9                      xor rcx, rcx
   650                                      ;---------------------------------------------------------------------------
   651                                      ; Skipping first multyplying by 10
   652 000002E8 4D85D2                      test r10, r10
   653 000002EB 7517                        jnz .zeros_test
   654                                      ;---------------------------------------------------------------------------
   655                                      ; Checking if the fraction is 0
   656 000002ED B906000000                  mov rcx, 6
   657 000002F2 EB19                        jmp .zeros_loop_end
   658                                      ;---------------------------------------------------------------------------
   659                                      .zeros_loop:
   660                                          ;-----------------------------------------------------------------------
   661                                          ; Multipying R10 by 10
   662 000002F4 4D89D5                          mov r13, r10
   663 000002F7 49C1E203                        shl r10, 3
   664 000002FB 49D1E5                          shl r13, 1
   665 000002FE 4D01EA                          add r10, r13
   666                                          ;-----------------------------------------------------------------------
   667                                          ; Incrementing counter of zeros
   668 00000301 48FFC1                          inc rcx
   669                                          ;-----------------------------------------------------------------------
   670                                          .zeros_test:
   671                                          ;-----------------------------------------------------------------------
   672                                          ; Comparing R10 and 10^(symbols in fraction)
   673 00000304 4981FAA0860100                  cmp r10, FRAC_ZEROS_CH
   674                                          ;-----------------------------------------------------------------------
   675 0000030B 72E7                        jb .zeros_loop
   676                                      .zeros_loop_end:
   677                                      ;---------------------------------------------------------------------------
   678                                      ; Printing fraction zeros
   679 0000030D B030                        mov al, '0'
   680                                      PutAL_NTimes
    92 0000030F 4801F9              <1>  add rcx, rdi
    93 00000312 4881F9[40000000]    <1>  cmp rcx, MaxPointer
    94 00000319 7C05                <1>  jl %%skip_clear_buffer
    95 0000031B E819FFFFFF          <1>  call ClearBuffer
    96                              <1>  %%skip_clear_buffer:
    97 00000320 4829F9              <1>  sub rcx, rdi
    98 00000323 F3AA                <1>  rep stosb
   681                                      ;---------------------------------------------------------------------------
   682                                      ; Printing fraction
   683 00000325 E85DFEFFFF                  call ToDec
   684                                      ;---------------------------------------------------------------------------
   685 0000032A C3                          ret
   686                                  ;===============================================================================
   687                                  
   688                                  GetArgDefault:
   689 0000032B 4C8B4D00                    mov r9, [rbp]
   690                                  
   691 0000032F 4C89E0                      mov rax, r12
   692 00000332 48C1E020                    shl rax, 32
   693 00000336 48C1E820                    shr rax, 32
   694 0000033A 4C89E3                      mov rbx, r12
   695 0000033D 48C1EB20                    shr rbx, 32
   696                                  
   697 00000341 4883C508                    add rbp, 8
   698                                  
   699 00000345 4883FB08                    cmp rbx, 8
   700 00000349 720F                        jb .skip_synch
   701 0000034B 4883F804                        cmp rax, 5 - 1
   702 0000034F 7503                            jne .skip_start_take_stack
   703 00000351 4C89C5                              mov rbp, r8
   704                                          .skip_start_take_stack:
   705 00000354 7604                            jbe .skip_synch
   706 00000356 4983C008                        add r8, 8
   707                                      .skip_synch:
   708 0000035A 49FFC4                      inc r12
   709 0000035D C3                          ret
   710                                  
   711                                  GetArgDouble:
   712 0000035E F3410F7E00                  movq xmm0, [r8]
   713                                  
   714 00000363 4C89E0                      mov rax, r12
   715 00000366 48C1E020                    shl rax, 32
   716 0000036A 48C1E820                    shr rax, 32
   717 0000036E 4C89E3                      mov rbx, r12
   718 00000371 48C1EB20                    shr rbx, 32
   719                                  
   720 00000375 4983C008                    add r8, 8
   721 00000379 4883F805                    cmp rax, 5
   722 0000037D 7211                        jb .skip_synch
   723 0000037F 4883FB07                        cmp rbx, 8 - 1
   724 00000383 7503                            jne .skip_start_take_stack
   725 00000385 4989E8                              mov r8, rbp
   726                                          .skip_start_take_stack:
   727 00000388 7610                            jbe .end_1
   728 0000038A 4883C508                        add rbp, 8
   729 0000038E EB0A                        jmp .end_1
   730                                      .skip_synch:
   731 00000390 4883FB07                        cmp rbx, 8 - 1
   732 00000394 7504                            jne .skip_start_take_stack_1
   733 00000396 4983C028                            add r8, 8 * 5
   734                                          .skip_start_take_stack_1:
   735                                      .end_1
   735          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
   736 0000039A 48FFC3                      inc rbx
   737 0000039D 48C1E320                    shl rbx, 32
   738 000003A1 4801C3                      add rbx, rax
   739 000003A4 4989DC                      mov r12, rbx
   740 000003A7 C3                          ret
   741                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   742                                  section .rodata
   743                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   744                                  
   745                                  ;===============================================================================
   746                                  ; Jump table for printf specifiers
   747                                  ;-------------------------------------------------------------------------------
   748                                  JmpTableSpecifiers:
   749 00000000 [C300000000000000]                      dq MyPrintf_cdecl.specifier_binary            ; b
   750 00000008 [B900000000000000]                      dq MyPrintf_cdecl.specifier_character         ; c
   751 00000010 [0201000000000000]                      dq MyPrintf_cdecl.specifier_decimal           ; d
   752 00000018 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; e
   753 00000020 [6D01000000000000]                      dq MyPrintf_cdecl.specifier_float             ; f
   754 00000028 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; g
   755 00000030 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; h
   756 00000038 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; i
   757 00000040 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; j
   758 00000048 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; k
   759 00000050 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; l
   760 00000058 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; m
   761 00000060 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; n
   762 00000068 [EB00000000000000]                      dq MyPrintf_cdecl.specifier_octal             ; o
   763 00000070 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; p
   764 00000078 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; q
   765 00000080 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; r
   766 00000088 [1101000000000000]                      dq MyPrintf_cdecl.specifier_string            ; s
   767 00000090 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; t
   768 00000098 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; u
   769 000000A0 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; v
   770 000000A8 [AB00000000000000]                      dq MyPrintf_cdecl.specifier_default           ; w
   771 000000B0 [D700000000000000]                      dq MyPrintf_cdecl.specifier_hexadecimal       ; x
   772                                  ;===============================================================================
   773                                  
   774                                  ;===============================================================================
   775                                  ; Double values for XMM registers
   776                                  ;-------------------------------------------------------------------------------
   777 000000B8 0000000000002440        ValueOf10       dq 10.0
   778                                  SYMBOLS_IN_FRAC equ 6
   779                                  FRAC_ZEROS_CH   equ 100000
   780                                  ;===============================================================================
   781                                  
   782                                  ;===============================================================================
   783                                  ; Array of digits used in numbers printing
   784                                  ;-------------------------------------------------------------------------------
   785 000000C0 303132333435363738-     Digits db "0123456789ABCDEF"
   785 000000C9 39414243444546     
   786                                  ;===============================================================================
   787                                  
   788                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   789                                  section .data
   790                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   791                                  
   792                                  ;===============================================================================
   793                                  ; Printf buffer
   794                                  ;-------------------------------------------------------------------------------
   795 00000000 000000000000000000-     Buffer          db 64 dup(0)
   795 00000009 000000000000000000-
   795 00000012 000000000000000000-
   795 0000001B 000000000000000000-
   795 00000024 000000000000000000-
   795 0000002D 000000000000000000-
   795 00000036 000000000000000000-
   795 0000003F 00                 
   796                                  MaxPointer      equ $
   797                                  ;===============================================================================
   798                                  
   799                                  ;===============================================================================
   800                                  ; Buffer to write numbers. Must be at leat 64 bytes long to store bin numbers
   801                                  ;-------------------------------------------------------------------------------
   802 00000040 000000000000000000-     NumberBuffer:   db 64 dup(0)
   802 00000049 000000000000000000-
   802 00000052 000000000000000000-
   802 0000005B 000000000000000000-
   802 00000064 000000000000000000-
   802 0000006D 000000000000000000-
   802 00000076 000000000000000000-
   802 0000007F 00                 
   803                                  NumberBufferLen equ $ - NumberBuffer
   804                                  ;===============================================================================
   805                                  
   806                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   807                                  section .note.GNU-stack noalloc noexec nowrite progbits
   808                                  ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
